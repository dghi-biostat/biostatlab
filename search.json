{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-21T16:31:39-04:00"
    },
    {
      "path": "index.html",
      "title": "BiostatLab",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-21T16:31:40-04:00"
    },
    {
      "path": "lab_0.html",
      "title": "Lab 0",
      "description": "Biostatistics & Epi, Lab 0 - GLHLTH 705\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\nLab 0 Goals:\r\nBy the end of this lab, you will have demonstrated a basic familiarity with the R coding environment and R Markdown files. You will be able to:\r\nStart a new project and import data\r\nUnderstand useful R terminology\r\nUse summary statistics to describe the Kenya dataset\r\nCreate a categorical variable using a continuous one\r\nGenerate histograms and boxplots using ggplot2\r\nCreate a simple cross-tabulation of two variables\r\nTask 1: Establish a workflow\r\nIn R, we organize our work by projects. It is best practice to keep no more than one project in any single folder on your computer. First, we should establish the file folders from which we’ll be working.\r\nCreate folders to store your work\r\nIf you haven’t already, now would be a good time to:\r\nCreate a new folder on your computer called “705 Lab”.\r\nWithin that folder, create a folder for this lab, called “Lab 0”.\r\nFinally, within that folder, create a folder for your data, called “data”\r\nSave the dataset titled Lab_0_kenya.rds (from Sakai) into the folder called “data”\r\nPlease make this a habit. We will expect you to do this for every lab, as it will keep your work organized and will keep you happy.\r\nCreate a New Project in RStudio\r\nNow open RStudio and take a deep breath. Don’t panic. This will all be very familiar in a few short months from now.\r\nInitiate a new project by going to File and clicking New Project.\r\nTODO: INSERT SCREENSHOT\r\nThen select Existing Directory and hit Browse. Navigate to the folder titled Lab 0. Open it, then hit Open.\r\nTask 2: Familiarize yourself with R Markdown\r\nNow, you will open a special kind of document known as “R Markdown”. This is a text editor (like Word or Google Docs), but with a twist. You can run code within the document. This makes data analysis an interactive, iterative (and therefore fun?) process that usually goes:\r\nWrite some code intended to transform your data\r\nRun the code\r\nObserve how your dataset behaved\r\n(Optional) Take a few notes\r\nTweak code\r\nRepeat\r\nFor each lab, we will provide you with a skeleton Markdown file on Sakai. If you haven’t already, download that file (“lab0_705_fall2021.Rmd”) and save it to your folder called “Lab 0”.\r\nNow open the file in RStudio. You can just double-click on it from the file folder. It will appear, but might feel a little pinched. Luckily, RStudio allows Markdowns to pop-out.\r\nClick the white square at the top of the file that I’ve circled in the photo below to do just that:\r\nPop-outTask 3: Load packages and data\r\nInstalling packages\r\nPackages are collections of functions. As we’ll see shortly, we use functions as code to view, manipulate, and analyze our data.\r\nThere are packages that come built-in with R. These have names like {base}, {utils}, and {stats}.\r\nSince R is open-source, users are able to create their own packages so that other R users can use them. These packages are available in places like the Comprehensive R Archive Network (CRAN for short) and GitHub.\r\nLucky for us, packages are easily retrieved from the command line. If you haven’t already, run the following code from your console to download the packages that we’ll be needing for this semester:\r\n\r\n\r\ninstall.packages(\"tidyverse\")\r\ninstall.packages(\"skimr\")\r\ninstall.packages(\"epiR\")\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"potato-nathan/epiAssist\")\r\n\r\n\r\n\r\nLoad libraries\r\nTo enable R to use a package’s functions in our current project environment, we need to load the packages using library()\r\nIn a fresh code chunk, call in the {tidyverse} and {skimr} packages using the following code:\r\n\r\n\r\n\r\n__Notice that when we install packages, we need to specify their names using quotes, but when we load them into R using library(), R recognizes them as package objects automatically. You can surround them with quotes and it will load all the same.\r\nTask 4: Load data\r\nYou will use the dataset kenya_dhs_dataset_lab_0.rds for this lab. Save the kenya_dhs_dataset_lab_0.rds dataset from SAKAI into the same folder as your New Project. Use command readRDS(‘filename.rds’) to load in the dataset. Don’t forget to use the assignment operator to give the dataset a name after importing the data. As an example, you can name it like this:\r\nkenya <- file name\r\nTask 5: Explore the dataframe\r\nFamiliarize yourself with the data by using the commands head(), length(), skim(), and nrow().\r\nAre there any string/character variables?\r\nAre there any variable or value labels?\r\nDo any variables have notes?\r\nTask 6: Create variable mage\r\nCreate a variable mage for mother’s age (as an integer) at the time of each child’s birth (note – some of these mothers have had multiple children) using the mutate() function. This is calculated from variables b3 (month code of child’s birth) and v011 (month code of mother’s birth). The difference between the values of these variables is months, so divide by 12 to get years. See the data dictionary for a more detailed description of month codes and how to use them. Use the as.integer() function within your mutate() function to truncate the calculated value to an integer.\r\nREMINDER: For your mutate function to work, you have to merge the changes into your dataset. As an example, use this before the mutate function: kenya <- kenya %>%\r\nTask 7: Frequency distributions of mage\r\nSuppose you want to break down mage into three categories. First, look at the frequency distribution (one-way frequency table) for mage to see where you might draw lines for your categories using the table() command.\r\nAre there any missing values for age? If so, how many?\r\nWhich range of ages appear the most frequently in mage?\r\nTask 8: Create variable magec\r\nUsing mage, generate a new variable with three categories: <18, 18-39, and ≥ 40, naming the new variable “magec” (mother’s age categorical). Set the values for magec to be 0,1,2, where 0 corresponds to the youngest age group (<18). Recommended steps:\r\nFirst, don’t forget to use the assignment operator to save your changes to the kenya dataframe.\r\nThen, use mutate() to create a new variable, magec,\r\nwithin your mutate() command, use case_when() to create a series of conditional statements that assigns number 0, 1, and 2 to each category\r\non a new line of code, use factor() to assign labels to each level of your new variable\r\nVariable Label: “Age in years categorized”\r\nValues:\r\n0: <18\r\n1: 18-39\r\n2: ≥ 40\r\nTask 9: Cross-tab of mage and magec\r\nLook at a cross-tabulation (two-way table) of mage and magec to ensure that magec was created correctly. Be sure missing values were handled properly (all observations that have a missing value for mage should be assigned the R missing value “NA” for magec.). Type “?table” for help with how to create a 2x2 table. Note: the order of the variables in the command controls which one is in the rows and which is in the columns of the table. Experiment to make your table readable.\r\nTask 10: Save new dataset\r\nSave the new dataset in the same directory using a different file name with the form shown in the instructions on page 1 using the saveRDS() command.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-21T17:33:41-04:00"
    },
    {
      "path": "lab_1.html",
      "title": "Lab 1",
      "description": "Biostatistics & Epi, Lab 1 - GLHLTH 705\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\nLab 1:\r\nGoals\r\nGenerate derived variables\r\nIdentify and recode special values\r\nRun descriptive statistics for continuous and categorical variables\r\nGenerate graphics for continuous variables\r\nGenerate a complete data dictionary\r\nTask 1: Load libraries & packages\r\nUse the dataset Lab_1_kenya.rds for this assignment. You will also need packages {skimr} and {tidyverse}\r\nTo run a line of code, use the shortcut ctrl + enter (Windows)/cmd + enter (Mac)\r\nTask 2: Recode variables\r\nConstruct the following derived variables using a pipe and mutate(). For each, examine the component variables for coded special values (e.g., missing, unknown) and be sure to set derived variable values appropriately. Label all variables and the coded values for the categorical ones using the factor() command.\r\nTask2a: bord5\r\nbord5: Dichotomous variable indicating birth order of the child. [0=current child was 1st through 4th in the birth order, 1=current child was later than 4th in the birth order]. Based on variable bord (birth order).\r\nTask 2b: male\r\nmale: Dichotomous categorical variable indicating that the child is male [0=female, 1=male]. Based on variable b4.\r\nTask 2c: mweight\r\nmweight: Continuous variable for maternal weight at time of interview (in kilograms). Based on variable v437. Note that v437 contains 1 implied decimal place. Divide by 10 to get kilograms.\r\nTask 2d: mheight\r\nmheight: Continuous maternal height at time of interview (in meters). Based on variable v438. Note that this variable is in centimeters and also contains 1 implied decimal place.\r\nTask 2e: mbmi\r\nmbmi: maternal body mass index (BMI). Weight (kilograms) / height2 (meters).\r\nTask 3: Frequency histograms\r\nGenerate frequency histograms of mweight, mheight and mbmi. Put meaningful axis labels and a title on each figure.\r\nTask 3a: mweight\r\nTask 3b: mheight\r\nTask 3c: mbmi\r\nTask 4: Boxplots\r\nGenerate boxplots of mweight, mheight, and mbmi for the levels of magec. Put meaningful axis labels and a title on each figure.\r\nTask 4a: mweight\r\nTask 4b: mheight\r\nTask 4c: mbmi\r\nTask 5: Frequency table\r\nFill in Table 1 with the frequency counts and percentages for the levels of the 3 categorical variables you have generated. Calculate percentages only for the non-missing values. Round percentages to 1 decimal place.\r\nTask 5a: bord5\r\nTask 5b: magec\r\nTask 5c: male\r\nTask 6: Table 2\r\nTable 2 is the data dictionary for the Kenya dataset, with columns added to annotate the variables and provide summary statistics.\r\nFill in these columns in this table for the variables originally on the dataset.\r\nAdd rows for the 7 new variables that you have created in both Labs 0 and 1.\r\nTask 7: Short answer\r\nExamine the range and proportion of missing values for each of the 7 variables you have created in Labs 0 and 1. Are there characteristics of any of these variables that are concerning (e.g., missing, suspicious or impossible values)? In contemplating analysis of these data, what do you think should be done with anomalous information? What effect would missing values have on the validity of your analyses (e.g., how might missing or extreme values affect inferences)? (Response no longer than 250 words, please)\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-21T16:31:42-04:00"
    }
  ],
  "collections": []
}
