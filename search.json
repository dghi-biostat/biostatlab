{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Contact your teaching team with questions",
      "author": [],
      "contents": "\r\nTODO: Names, links to websites, and contact information’\r\ncat PNG Designed By 699pic from https://pngtree.com/freepng/cute-cat_5644947.html?sol=downref&id=bef\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-22T15:16:29-04:00"
    },
    {
      "path": "index.html",
      "title": "BiostatLab",
      "description": "The homepage for DGHI Biostat & Epi lab assignments, help pages, and whirly gigs\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nWelcome!\r\nA quick note on R and RStudio:\r\nA reminder\r\n\r\nWelcome!\r\nThis is the DGHI Biostatistics lab assignment homepage. Save this site’s link to your bookmark browser and return here to access lab materials. Navigate to the various labs and help documents using the bar at the top of the page.\r\nA quick note on R and RStudio:\r\nFor this lab, you are going to need to download R and RStudio, a pair of free open-source softwares used for everything from data analysis to web design.\r\nA reminder\r\nDon’t hesitate to ask for help if you are having problems with software, code, etc.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-22T15:16:30-04:00"
    },
    {
      "path": "lab_0.html",
      "title": "Lab 0",
      "description": "Biostatistics & Epi, Lab 0 - GLHLTH 705: Install packages, summary statistics, create a variable with mutate, visualize with ggplot2\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nLab 0 Goals:\r\nLAB MATERIALS:\r\n\r\nTask 1: Establish a workflow\r\nCreate folders to store your work\r\nCreate a New Project in RStudio\r\n\r\nTask 2: Familiarize yourself with R Markdown\r\nTask 3: Install and load packages\r\nInstalling packages\r\nLoad packages with library()\r\n\r\nTask 4: Load data with readRDS()\r\nTask 5: Explore the dataframe\r\nTask 6: Create variable mage\r\nTask 7: Frequency distributions of mage\r\nTask 8: Create variable magec\r\nTask 9: Cross-tab of mage and magec\r\nMethod 1:\r\nMethod 2:\r\nTask 10: Save new dataset\r\n\r\n\r\nLab 0 Goals:\r\nBy the end of this lab, you will have demonstrated a basic familiarity with the R coding environment and R Markdown files. You will be able to:\r\n* Start a new project and import data\r\n* Understand useful R terminology\r\n* Use summary statistics to describe the Kenya dataset\r\n* Create a categorical variable using a continuous one\r\n* Generate histograms and boxplots using ggplot2\r\n* Create a simple cross-tabulation of two variables\r\nLAB MATERIALS:\r\nDownload\r\nthis R Markdown file for Lab 0.\r\nFill it in with your answers to the following lab tasks. Once you’re finished, rename it as firsInitial_YourLastName_Lab0.Rmd, and submit it using the Sakai dropbox.\r\nTask 1: Establish a workflow\r\nIn R, we organize our work by projects. It is best practice to keep no more than one project in any single folder on your computer. First, we should establish the file folders from which we’ll be working.\r\nCreate folders to store your work\r\nIf you haven’t already, now would be a good time to:\r\n1. Create a new folder on your computer called \"705 Lab\".\r\n\r\n2. Within that folder, create a folder for this lab, called \"Lab 0\".\r\n\r\n3. Finally, within that folder, create a folder for your data, called \"data\"\r\n\r\n4. Save the dataset titled Lab_0_kenya.rds (from Sakai) into the folder called \"data\"\r\nPlease make this a habit. We will expect you to do this for every lab, as it will keep your work organized and will keep you happy.\r\nCreate a New Project in RStudio\r\nNow open RStudio and take a deep breath. Don’t panic. This will all be very familiar in a few short months from now.\r\nInitiate a new project by going to File and clicking New Project.\r\nTODO: INSERT SCREENSHOT\r\nThen select Existing Directory and hit Browse. Navigate to the folder titled Lab 0. Open it, then hit Open.\r\nTask 2: Familiarize yourself with R Markdown\r\nNow, you will open a special kind of document known as “R Markdown”. This is a text editor (like Word or Google Docs), but with a twist. You can run code within the document. This makes data analysis an interactive, iterative (and therefore fun?) process that usually goes:\r\n1. Write some code intended to transform your data\r\n2. Run the code\r\n3. Observe how your dataset behaved\r\n4. (Optional) Take a few notes\r\n5. Tweak code\r\n6. Repeat\r\nFor each lab, we will provide you with a skeleton Markdown file on Sakai. If you haven’t already, download that file (“lab0_705_fall2021.Rmd”) and save it to your folder called “Lab 0”.\r\nNow open the file in RStudio. You can just double-click on it from the file folder. It will appear, but might feel a little pinched. Luckily, RStudio allows Markdowns to pop-out.\r\nClick the white square at the top of the file that I’ve circled in the photo below to do just that:\r\nPop-outTask 3: Install and load packages\r\nInstalling packages\r\nPackages are collections of functions. As we’ll see shortly, we use functions as code to view, manipulate, and analyze our data.\r\nThere are packages that come built-in with R. These have names like {base}, {utils}, and {stats}.\r\nSince R is open-source, users are able to create their own packages so that other R users can use them. These packages are available in places like the Comprehensive R Archive Network (CRAN for short) and GitHub.\r\nLucky for us, packages are easily retrieved from the command line. If you haven’t already, run the following code from your console to download the packages that we’ll be needing for this semester:\r\n\r\n\r\ninstall.packages(\"tidyverse\")\r\ninstall.packages(\"skimr\")\r\ninstall.packages(\"epiR\")\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"potato-nathan/epiAssist\")\r\n\r\n\r\n\r\nLoad packages with library()\r\nTo enable R to use a package’s functions in our current project environment, we need to load the packages using the library() function.\r\nIn a fresh code chunk, call in the {tidyverse} and {skimr} packages using the following code:\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(skimr)\r\n\r\n\r\n\r\nNotice that when we install packages, we need to specify their names using quotes, but when we load them into R using library(), R recognizes them as package objects automatically, and so don’t need quotes. You can surround them with quotes and it will load all the same.\r\nTask 4: Load data with readRDS()\r\nYou will use the dataset Lab_0_kenya.rds for this lab. You’ve hopefully already saved this lab’s dataset to the folder Lab 0 > data. You will use the function readRDS() to import the data file from your computer’s folder.\r\nSince our project is located within the folder called “Lab 0”, our computer will automatically look within that folder for the data.\r\nAll we need to do is specify that it’s in the folder called “data”.\r\nUse the following code to load your data into R and give it the name kenya.\r\n\r\n\r\nkenya <- readRDS('data/Lab_0_kenya.rds')\r\n\r\n\r\n\r\nThe <- is called the Assignment Operator. We can use it to assign names to objects in our coding environment:\r\nWe can use our assignment operator for characters, numbers, logical operators, etc.:\r\n\r\n\r\nfruit <- c(\"oranges\", \"papayas\", \"apricots\")\r\n\r\nnumber <- 99\r\n\r\nlogical <- FALSE\r\n\r\n\r\n\r\nNow that the above values are stored in our environment, we can use them in other functions or operations:\r\n\r\n\r\npaste(fruit, \"are orange\", sep = \" \")\r\n\r\n\r\n[1] \"oranges are orange\"  \"papayas are orange\"  \"apricots are orange\"\r\n\r\nnumber + 1\r\n\r\n\r\n[1] 100\r\n\r\nisTRUE(logical)\r\n\r\n\r\n[1] FALSE\r\n\r\nWe’ve done the same thing with our dataset, giving it the name kenya. Use the function head() to view the first six rows in the dataset:\r\n\r\n\r\nhead(kenya)\r\n\r\n\r\n\r\nTask 5: Explore the dataframe\r\nFamiliarize yourself with the data by using the commands ncol(), nrow(), class(), names() and skim().\r\nAre there any string/character variables?\r\nAre there any variable or value labels?\r\nDo any variables have notes?\r\nSimilar to the function head(), we can feed our kenya dataframe to various functions that tell us other useful information about it.\r\nUse ncol() to print the number of columns in our dataframe\r\nUse nrow() to print the number of rows\r\nUse class() to view each variable’s “type”\r\nUse names() to view each variable’s name.\r\nUse skim() to print summary statistics for each variable in the dataframe\r\nTask 6: Create variable mage\r\nUsing a pipe and the mutate() function, create a new variable, mage for mother’s age (as an integer) at the time of each child’s birth (note – some of these mothers have had multiple children). This is calculated from variables b3 (month code of child’s birth) and v011 (month code of mother’s birth). The difference between the values of these variables is months, so divide by 12 to get years. See the data dictionary for a more detailed description of month codes and how to use them. Use the as.integer() function within your mutate() operation to truncate the calculated values for mage to integers.\r\nThe mutate() function works with the following syntax.\r\n\r\n# don't forget to write over your old dataframe with the new \"mutated\" one\r\ndata <- data %>%\r\n  mutate(newVariableName = (Variable1 - Variable 2))\r\n\r\nTask 7: Frequency distributions of mage\r\nSuppose you want to break down mage into three categories. First, look at the frequency distribution (one-way frequency table) for mage to see where you might draw lines for your categories using the table() command.\r\ntable() works by identifying unique values within a variable, and then counts them.\r\nIt works on character variables, categorical (factor) variables, and even numbers.\r\nWe can tell R to look at specific variables inside our dataframe with the $ sign. The syntax looks like this: dataframeName$variableName\r\nWe must also provide the argument useNA = 'always' to our table() function in order to include NA values in the tabulation.\r\nUse table() to look at mage, then consider the following questions:\r\n* Are there any missing values for age? If so, how many?\r\n* Which range of ages appear the most frequently in mage?\r\nTask 8: Create variable magec\r\nUsing mage, generate a new variable with three categories: <18, 18-39, and ≥ 40, naming the new variable magec (__m__other’s age __c__ategorical). Set the values for magec to be 0,1,2, where 0 corresponds to the youngest age group (<18). Recommended steps:\r\nFirst, don’t forget to use the assignment operator to save your changes to the kenya dataframe.\r\nThen, use mutate() to create a new variable, magec,\r\nwithin your mutate() command, use case_when() to create a series of conditional statements that assigns number 0, 1, and 2 to each category\r\non a new line of code, use factor() to assign labels to each level of your new variable\r\nValues:\r\n0: <18\r\n1: 18-39\r\n2: ≥ 40\r\nConvert a variable to a factor with the following syntax:\r\n\r\n\r\ndataframe$variableYouWantToFactor <- factor(dataframe$variableYouWantToFactor,\r\n                                            labels = c(\"Label for 0\", \"Label for 1\", \"Label for 2\"))\r\n\r\n\r\n\r\nTask 9: Cross-tab of mage and magec\r\nLook at a cross-tabulation (two-way table) of mage and magec to ensure that magec was created correctly. Be sure missing values were handled properly (all observations that have a missing value for mage should be assigned the R missing value “NA” for magec). Try the two separate methods for cross-tabulation:\r\nMethod 1:\r\nType “?table” in the console for help with how to create a 2x2 table. Note: the order of the variables in the command controls which one is in the rows and which is in the columns. Experiment to make your table readable.\r\n\r\n\r\n# example code:\r\n\r\ntable(data$x, data$y, useNA = 'always')\r\n\r\n\r\n\r\nMethod 2:\r\nWe can also use tidyverse functions to accomplish a two-way tabulation of our variables of interest. These functions will become increasingly relevant and useful, and are a big reason why R is such a popular platform for data science. We will use a pipe (%>%), group_by(), another pipe, and count() to get the same output given by table().\r\n\r\n\r\n# example code:\r\n\r\n# notice that we don't want to assign this operation to a name\r\n# we just want to view the output\r\ndata %>%\r\n  group_by(x, y) %>%\r\n  count()\r\n\r\n\r\n\r\nA translation of the above code to written instructions would go as follows, where bolded words represent the grammatical equivalent of our pipe, %>%:\r\n“Take dataset, data, and then group_by by variable x, then within those groups, group by variable y, and then count the values in each of our groups.”\r\nHere’s a link to learning more about pipes. Or just take a look at this tweet:\r\n\r\n\r\n\r\nTask 10: Save new dataset\r\nUsing function saveRDS(), save the new dataset in the same directory as our original data, using the following format: “firstInitial_YourLastName_lab0.rds”\r\nsaveRDS() takes two primary arguments:\r\n* The dataframe object you want to save\r\n* The location in which you'd like it saved as a .rds file\r\nDon’t forget the following:\r\n* The file locations should be in quotes, so that R knows to read it as a character string\r\n* Your file should be saved in your local Lab 0 folder, `data/`\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-22T15:16:33-04:00"
    },
    {
      "path": "lab_1.html",
      "title": "Lab 1",
      "description": "Biostatistics & Epi, Lab 1 - GLHLTH 705\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nLab 1:\r\nGoals\r\nTask 1: Load libraries & packages\r\nTask 2: Recode variables\r\nTask2a: bord5\r\nTask 2b: male\r\nTask 2c: mweight\r\nTask 2d: mheight\r\nTask 2e: mbmi\r\n\r\nTask 3: Frequency histograms\r\nTask 3a: mweight\r\nTask 3b: mheight\r\nTask 3c: mbmi\r\n\r\nTask 4: Boxplots\r\nTask 4a: mweight\r\nTask 4b: mheight\r\nTask 4c: mbmi\r\n\r\nTask 5: Frequency table\r\nTask 5a: bord5\r\nTask 5b: magec\r\nTask 5c: male\r\n\r\nTask 6: Table 2\r\nTask 7: Short answer\r\n\r\n\r\nLab 1:\r\nGoals\r\nGenerate derived variables\r\nIdentify and recode special values\r\nRun descriptive statistics for continuous and categorical variables\r\nGenerate graphics for continuous variables\r\nGenerate a complete data dictionary\r\nTask 1: Load libraries & packages\r\nUse the dataset Lab_1_kenya.rds for this assignment. You will also need packages {skimr} and {tidyverse}\r\nTo run a line of code, use the shortcut ctrl + enter (Windows)/cmd + enter (Mac)\r\nTask 2: Recode variables\r\nConstruct the following derived variables using a pipe and mutate(). For each, examine the component variables for coded special values (e.g., missing, unknown) and be sure to set derived variable values appropriately. Label all variables and the coded values for the categorical ones using the factor() command.\r\nTask2a: bord5\r\nbord5: Dichotomous variable indicating birth order of the child. [0=current child was 1st through 4th in the birth order, 1=current child was later than 4th in the birth order]. Based on variable bord (birth order).\r\nTask 2b: male\r\nmale: Dichotomous categorical variable indicating that the child is male [0=female, 1=male]. Based on variable b4.\r\nTask 2c: mweight\r\nmweight: Continuous variable for maternal weight at time of interview (in kilograms). Based on variable v437. Note that v437 contains 1 implied decimal place. Divide by 10 to get kilograms.\r\nTask 2d: mheight\r\nmheight: Continuous maternal height at time of interview (in meters). Based on variable v438. Note that this variable is in centimeters and also contains 1 implied decimal place.\r\nTask 2e: mbmi\r\nmbmi: maternal body mass index (BMI). Weight (kilograms) / height2 (meters).\r\nTask 3: Frequency histograms\r\nGenerate frequency histograms of mweight, mheight and mbmi. Put meaningful axis labels and a title on each figure.\r\nTask 3a: mweight\r\nTask 3b: mheight\r\nTask 3c: mbmi\r\nTask 4: Boxplots\r\nGenerate boxplots of mweight, mheight, and mbmi for the levels of magec. Put meaningful axis labels and a title on each figure.\r\nTask 4a: mweight\r\nTask 4b: mheight\r\nTask 4c: mbmi\r\nTask 5: Frequency table\r\nFill in Table 1 with the frequency counts and percentages for the levels of the 3 categorical variables you have generated. Calculate percentages only for the non-missing values. Round percentages to 1 decimal place.\r\nTask 5a: bord5\r\nTask 5b: magec\r\nTask 5c: male\r\nTask 6: Table 2\r\nTable 2 is the data dictionary for the Kenya dataset, with columns added to annotate the variables and provide summary statistics.\r\nFill in these columns in this table for the variables originally on the dataset.\r\nAdd rows for the 7 new variables that you have created in both Labs 0 and 1.\r\nTask 7: Short answer\r\nExamine the range and proportion of missing values for each of the 7 variables you have created in Labs 0 and 1. Are there characteristics of any of these variables that are concerning (e.g., missing, suspicious or impossible values)? In contemplating analysis of these data, what do you think should be done with anomalous information? What effect would missing values have on the validity of your analyses (e.g., how might missing or extreme values affect inferences)? (Response no longer than 250 words, please)\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-22T15:16:34-04:00"
    }
  ],
  "collections": []
}
